// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EUserRole {
  ADMIN
  MANAGER
}

enum AppointmentStatus {
  AVAILABLE
  RESERVED
  WAITING
  FINISHED
  ABSENT
}

enum EDayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id        Int        @id @default(autoincrement())
  firstName String
  lastName  String
  email     String     @unique
  password  String
  role      EUserRole
  schedules Schedule[] @relation("UserSchedules")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("users")
}

model Schedule {
  id           Int           @id @default(autoincrement())
  description  String
  userId       Int
  user         User          @relation("UserSchedules", fields: [userId], references: [id])
  startDate    DateTime
  endDate      DateTime
  scheduleDays ScheduleDay[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("schedules")
}

model ScheduleDay {
  id            Int           @id @default(autoincrement())
  scheduleId    Int
  schedule      Schedule      @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  day           EDayOfWeek
  date          DateTime
  startTime     String
  endTime       String
  slotInterval  Int
  appointments  Appointment[] @relation("ScheduleDayAppointments")
  rests     ScheduleDayRest[] @relation("ScheduleDayToRests")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("schedule_days")
}

model ScheduleDayRest {
  id        Int           @id @default(autoincrement())
  scheduleDayId Int
  scheduleDay   ScheduleDay       @relation("ScheduleDayToRests", fields: [scheduleDayId], references: [id])
  restStartTime String
  restEndTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("schedule_day_rests")
}

model Appointment {
  id            Int               @id @default(autoincrement())
  startTime     String
  endTime       String
  description   String?
  status        AppointmentStatus
  customerId    Int?
  customer      Customer?         @relation(fields: [customerId], references: [id])
  scheduleDayId Int
  scheduleDay   ScheduleDay       @relation("ScheduleDayAppointments", fields: [scheduleDayId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

model Customer {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  phoneNumber String
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointments Appointment[]

  @@map("customers")
}
