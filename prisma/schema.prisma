// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EUserRole {
  ADMIN
  MANAGER
}

enum AppointmentStatus {
  DISPONIBLE
  RESERVADO
  ESPERANDO
  TERMINADO
  AUSENTE
}

enum EDayOfWeek {
  LUNES
  MARTES
  MIÉRCOLES
  JUEVES
  VIERNES
  SÁBADO
  DOMINGO
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String    @unique
  password  String
  role      EUserRole
  schedule  Schedule?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model Schedule {
  id           Int                 @id @default(autoincrement())
  userId       Int                 @unique
  user         User                @relation(fields: [userId], references: [id])
  appointments Appointment[]       @relation("ScheduleAppointments")
  scheduleDays ScheduleDayConfig[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  @@map("schedules")
}

model ScheduleDayConfig {
  id           Int                     @id @default(autoincrement())
  scheduleId   Int
  schedule     Schedule                @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  day          EDayOfWeek              @unique
  startTime    String
  endTime      String
  slotInterval Int
  status       Boolean
  rests        ScheduleDayRestConfig[] @relation("ScheduleDayToRests")
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt

  @@map("schedule_days_config")
}

model ScheduleDayRestConfig {
  id            Int               @id @default(autoincrement())
  scheduleDayId Int
  scheduleDay   ScheduleDayConfig @relation("ScheduleDayToRests", fields: [scheduleDayId], references: [id], onDelete: Cascade)
  startTime     String
  endTime       String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@map("schedule_day_rests_config")
}

model Appointment {
  id          Int               @id @default(autoincrement())
  startTime   String
  endTime     String
  date        DateTime
  description String?
  status      AppointmentStatus
  customerId  Int?
  customer    Customer?         @relation(fields: [customerId], references: [id])
  scheduleId  Int
  schedule    Schedule          @relation("ScheduleAppointments", fields: [scheduleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

model Customer {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  phoneNumber String   @unique
  email       String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointments Appointment[]

  @@map("customers")
}
